{"version":3,"sources":["webpack:///webpack/bootstrap 22865b9979539f2144b0","webpack:///./src/classes/Board.js","webpack:///./src/classes/Player.js","webpack:///./src/style.scss","webpack:///./src/index.js"],"names":["Board","state","every","cell","symbol","position","moves","forEach","index","push","isEmpty","isFull","Player","max_depth","nodes_map","Map","board","alpha","beta","maximizing","callback","depth","constructor","name","clear","isTerminal","winner","best","avail","getAvailableMoves","loopvar1","length","child","slice","insert","node_value","getBestMove","Math","max","has","get","set","arr","split","rand","floor","random","ret","avail2","loopvar2","min","hasClass","el","className","classList","contains","match","RegExp","addClass","add","removeClass","remove","reg","replace","drawWinningLine","direction","row","document","getElementById","setTimeout","newGame","starting_player","game_type","p","parseInt","b","innerHTML","html_cells","children","starting","player_turn","addEventListener","currentPlayer","toUpperCase","event","target","tagName","game_type_choices","choice","dataset","value","depth_choices","starting_player_choices"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 22865b9979539f2144b0","/**\r\n  * @desc This class represents the board, contains methods that checks board state, insert a symbol, etc..\r\n  * @param {Array} state - an array representing the state of the board\r\n*/\r\nclass Board {\r\n    //Initializing the board\r\n    constructor(state = ['','','','','','','','','']) {\r\n        this.state = state;\r\n    }\r\n    //Logs a visualised board with the current state to the console\r\n    \r\n    //Checks if board has no symbols yet\r\n    isEmpty() {\r\n        return this.state.every(cell => !cell);\r\n    }\r\n    //Check if board has no spaces available\r\n    isFull() {\r\n        return this.state.every(cell => cell);\r\n    }\r\n    /**\r\n     * Inserts a new symbol(x,o) into\r\n     * @param {String} symbol \r\n     * @param {Number} position\r\n     * @return {Boolean} boolean represent success of the operation\r\n     */\r\n    insert(symbol, position) {\r\n        if(position > 8 || this.state[position]) return false; //Cell is either occupied or does not exist\r\n        this.state[position] = symbol;\r\n        return true;\r\n    }\r\n    //Returns an array containing available moves for the current state\r\n    getAvailableMoves() {\r\n        const moves = [];\r\n        this.state.forEach((cell, index) => {\r\n            if(!cell) moves.push(index); \r\n        });\r\n        return moves;\r\n    }\r\n    /**\r\n     * Checks if the board has a terminal state ie. a player wins or the board is full with no winner\r\n     * @return {Object} an object containing the winner, direction of winning and row number\r\n     */\r\n    isTerminal() {\r\n        //Return False if board in empty\r\n        if(this.isEmpty()) return false;\r\n\r\n        //Checking Horizontal Wins\r\n        if(this.state[0] == this.state[1] && this.state[0] == this.state[2] && this.state[0]) {\r\n            return {'winner': this.state[0], 'direction': 'H', 'row': 1};\r\n        }\r\n        if(this.state[3] == this.state[4] && this.state[3] == this.state[5] && this.state[3]) {\r\n            return {'winner': this.state[3], 'direction': 'H', 'row': 2};\r\n        }\r\n        if(this.state[6] == this.state[7] && this.state[6] == this.state[8] && this.state[6]) {\r\n            return {'winner': this.state[6], 'direction': 'H', 'row': 3};\r\n        }\r\n\r\n        //Checking Vertical Wins\r\n        if(this.state[0] == this.state[3] && this.state[0] == this.state[6] && this.state[0]) {\r\n            return {'winner': this.state[0], 'direction': 'V', 'row': 1};\r\n        }\r\n        if(this.state[1] == this.state[4] && this.state[1] == this.state[7] && this.state[1]) {\r\n            return {'winner': this.state[1], 'direction': 'V', 'row': 2};\r\n        }\r\n        if(this.state[2] == this.state[5] && this.state[2] == this.state[8] && this.state[2]) {\r\n            return {'winner': this.state[2], 'direction': 'V', 'row': 3};\r\n        }\r\n\r\n        //Checking Diagonal Wins\r\n        if(this.state[0] == this.state[4] && this.state[0] == this.state[8] && this.state[0]) {\r\n            return {'winner': this.state[0], 'direction': 'D', 'row': 1};\r\n        }\r\n        if(this.state[2] == this.state[4] && this.state[2] == this.state[6] && this.state[2]) {\r\n            return {'winner': this.state[2], 'direction': 'D', 'row': 2};\r\n        }\r\n\r\n        //If no winner but the board is full, then it's a draw\r\n        if(this.isFull()) {\r\n            return {'winner': 'draw'};\r\n        }\r\n        \r\n        //return false otherwise\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default Board;\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Board.js","import Board from './Board';\r\n\r\n/**\r\n  * @desc This class represents the computer player, contains a single method that uses minimax to get the best move\r\n  * @param {Number} max_depth - limits the depth of searching\r\n  * @param {Map} nodes_map - stores the heuristic values for each possible move\r\n*/\r\nclass Player {\r\n\tconstructor(max_depth = -1) {\r\n        this.max_depth = max_depth;\r\n        this.nodes_map = new Map();\r\n    }\r\n    \r\n\tgetBestMove(board, alpha, beta, maximizing = true, callback = () => {}, depth = 0)\r\n\t{\r\n\t\t//Throw an error if the first argument is not a board\r\n\t\tif(board.constructor.name !== \"Board\") throw('The first argument to the getBestMove method should be an instance of Board class.');\r\n\t\t\r\n\t\t//clear nodes_map if the function is called for a new move\r\n\t\tif(depth == 0) this.nodes_map.clear();\r\n\r\n\t\t// //Checking for horizontal wins\r\n\t\t// \tvar bestmov = 100;\r\n  \t\t\t\r\n  // \t\t\tvar lv1=0;\r\n  \t\t\t\r\n  // \t\t\tfor (lv1=0; lv1<9;lv1++)\r\n  // \t\t\t{\r\n  // \t\t\t\tif( board.state[lv1] == board.state[lv1 + 1] && board.state[lv1] ) \r\n  // \t\t\t\t{\r\n  // \t\t      \t\tif( lv1==0 || lv1==3 || lv1==6 && (board.state[lv1 + 2]=='') )\r\n  // \t\t      \t\t{\r\n  // \t\t      \t\t\tbestmov =  (lv1 + 2);\r\n  // \t\t      \t\t\tcallback(bestmov);\r\n  // \t\t      \t\t\treturn bestmov;\r\n  // \t\t\t\t\t}\r\n\r\n  // \t\t      \t\tif( lv1==1 || lv1==4 || lv1==7 &&  (board.state[lv1 - 1]=='') )\r\n  // \t\t      \t\t{\r\n  // \t\t      \t\t\tbestmov =  (lv1 - 1);\t\r\n  // \t\t      \t\t\tcallback(bestmov);\r\n  // \t\t      \t\t\treturn bestmov;\r\n  // \t\t      \t\t}\r\n\t\t//         }\r\n\r\n\t\t//         if( board.state[lv1] == board.state[lv1 + 2] && board.state[lv1] && (board.state[lv1+1]=='') ) \r\n  // \t\t\t\t{\r\n  // \t\t      \t\tif( lv1==0 || lv1==3 || lv1==6)\r\n  // \t\t      \t\t{\r\n  // \t\t      \t\t\tbestmov =  (lv1 + 1);\r\n  // \t\t      \t\t\tcallback(bestmov);\r\n  // \t\t      \t\t\treturn bestmov;\r\n  // \t\t      \t\t}\r\n  // \t\t      \t}\r\n  // \t\t\t}\t\t      \r\n  \t\t      \r\n\r\n  // \t\t    //Checking for vertical wins\r\n\r\n  // \t\t    var lv2 = 0;\r\n\r\n  // \t\t    for (lv2=0; lv1<3;lv1++)\r\n  // \t\t\t{\r\n  // \t\t\t\tif( board.state[lv1] == board.state[lv1 + 3] && board.state[lv1] && (board.state[lv1+6]=='')) \r\n  // \t\t\t\t{\r\n  // \t\t         \tbestmov =  (lv1 + 6);\r\n  // \t\t         \tcallback(bestmov);\r\n  // \t\t      \t\treturn bestmov;\r\n  // \t\t\t\t}\r\n\r\n\t\t//         if( board.state[lv1] == board.state[lv1 + 6] && board.state[lv1] && (board.state[lv1+3]=='')) \r\n  // \t\t\t\t{\r\n  // \t\t      \t\tbestmov =  (lv1 + 3); \r\n  // \t\t      \t\tcallback(bestmov);\r\n  // \t\t      \t\treturn bestmov; \t\t      \t\t\t\t      \t\t\r\n  // \t\t      \t}\r\n  // \t\t\t}\r\n  \t\t      \r\n  // \t\t    if(board.state[3] == board.state[6] && board.state[3] && (board.state[0]==''))\r\n  // \t\t    {\r\n  // \t\t      \tbestmov =  0; \r\n  // \t\t      \tcallback(bestmov);\r\n  // \t\t      \treturn bestmov;\t\t          \r\n  // \t\t    }\r\n\r\n  // \t\t    if(board.state[4] == board.state[7] && board.state[4] && (board.state[1]==''))\r\n  // \t\t    {\r\n  // \t\t      \tbestmov =  1;\r\n  // \t\t      \tcallback(bestmov);\r\n  // \t\t      \treturn bestmov;\t  \t\t          \r\n  // \t\t    }\r\n\r\n  // \t\t    if(board.state[5] == board.state[8] && board.state[5] && (board.state[2]==''))\r\n  // \t\t    {\r\n  // \t\t      \tbestmov =  2;\r\n  // \t\t      \tcallback(bestmov);\r\n  // \t\t      \treturn bestmov;\t  \t\t          \r\n  // \t\t    }       \r\n  \t\t    \r\n  // \t\t    //Checking for diagonal wins  \t\t    \r\n\r\n  // \t\t    if(board.state[0] == board.state[4] && board.state[0] && (board.state[8]=='')) {\r\n  // \t\t          bestmov =  8;\r\n  // \t\t          callback(bestmov);\r\n  // \t\t      \treturn bestmov;\t\r\n  // \t\t    }\r\n  // \t\t    if(board.state[0] == board.state[8] && board.state[0] && (board.state[4]=='')) {\r\n  // \t\t          bestmov =  4;\r\n  // \t\t          callback(bestmov);\r\n  // \t\t      \treturn bestmov;\t\r\n  // \t\t    }\r\n  // \t\t    if(board.state[4] == board.state[8] && board.state[4] && (board.state[0]=='')) {\r\n  // \t\t          bestmov =  0;\r\n  // \t\t          callback(bestmov);\r\n  // \t\t      \treturn bestmov;\t\r\n  // \t\t    }\r\n  // \t\t    if(board.state[2] == board.state[4] && board.state[2] && (board.state[6]=='')) {\r\n  // \t\t          bestmov =  6;\r\n  // \t\t          callback(bestmov);\r\n  // \t\t      \treturn bestmov;\t\r\n  // \t\t    }\r\n  // \t\t    if(board.state[2] == board.state[6] && board.state[2] && (board.state[4]=='')) {\r\n  // \t\t          bestmov =  4;\r\n  // \t\t          callback(bestmov);\r\n  // \t\t      \treturn bestmov;\t\r\n  // \t\t    }\r\n  // \t\t    if(board.state[4] == board.state[6] && board.state[4] && (board.state[2]=='')) {\r\n  // \t\t          bestmov =  2;\r\n  // \t\t          callback(bestmov);\r\n  // \t\t      \treturn bestmov;\t \r\n  // \t\t    }\r\n\r\n\t\t//If the board state is a terminal one, return the heuristic value\r\n\t\tif(board.isTerminal() || depth == this.max_depth ) {\r\n\t\t\tif(board.isTerminal().winner == 'x') {\r\n\t\t\t\treturn 100 - depth;\r\n\t\t\t} else if (board.isTerminal().winner == 'o') {\r\n\t\t\t\treturn -100 + depth;\r\n\t\t\t}\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t\r\n\t\t//Current player is maximizing\r\n\t\tif(maximizing) \r\n\t\t{\r\n\t\t\t//Initializ best to the lowest possible value\r\n\t\t\tlet best = -100;\r\n\t\t\t//Loop through all empty cells\r\n\t\t\tvar avail = board.getAvailableMoves(); \r\n\t\t\tvar loopvar1;\r\n\t\t\tfor (loopvar1 = 0; loopvar1 < avail.length; loopvar1++)\r\n\t\t\t{\r\n\t\t\t\t//Initialize a new board with the current state (slice() is used to create a new array and not modify the original)\r\n\t\t\t\tlet child = new Board(board.state.slice());\r\n\t\t\t\t//Create a child node by inserting the maximizing symbol x into the current emoty cell\r\n\t\t\t\tchild.insert('x', avail[loopvar1]);\t\t\t\t\r\n\r\n\t\t\t\t//Recursively calling getBestMove this time with the new board and minimizing turn and incrementing the depth\r\n\t\t\t\tlet node_value = this.getBestMove(child, alpha, beta, false, callback, depth + 1);\r\n\t\t\t\t//Updating best value\r\n\t\t\t\tbest = Math.max(best, node_value);\r\n\t\t\t\talpha = Math.max(alpha, best);\r\n\t\t\t\tif(alpha >= beta)\r\n\t\t\t\t{\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//If it's the main function call, not a recursive one, map each heuristic value with it's moves indicies\r\n\t\t\t\tif(depth == 0) {\r\n\t\t\t\t\t//Comma seperated indicies if multiple moves have the same heuristic value\r\n\t\t\t\t\tvar moves = this.nodes_map.has(node_value) ? `${this.nodes_map.get(node_value)},${avail[loopvar1]}` : avail[loopvar1];\r\n\t\t\t\t\tthis.nodes_map.set(node_value, moves);\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t}\r\n\t\t\t//If it's the main call, return the index of the best move or a random index if multiple indicies have the same value\r\n\t\t\tif(depth == 0) {\r\n\t\t\t\tif(typeof this.nodes_map.get(best) == 'string') {\r\n\t\t\t\t\tvar arr = this.nodes_map.get(best).split(',');\r\n\t\t\t\t\tvar rand = Math.floor(Math.random() * arr.length);\r\n\t\t\t\t\tvar ret = arr[rand];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tret = this.nodes_map.get(best);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//run a callback after calculation and return the index\r\n\t\t\t\tcallback(ret);\r\n\t\t\t\treturn ret;\r\n\t\t\t}\r\n\t\t\t//If not main call (recursive) return the heuristic value for next calculation\r\n\t\t\treturn best;\r\n\t\t}\r\n\r\n\t\tif(!maximizing) {\r\n\t\t\t//Initialise best to the highest possible value\r\n\t\t\tlet best = 100;\r\n\t\t\t//Loop through all empty cells\r\n\t\t\tvar avail2 = board.getAvailableMoves();\r\n\t\t\tvar loopvar2;\r\n\t\t\tfor (loopvar2 = 0; loopvar2 < avail2.length; loopvar2++)\r\n\t\t\t{\r\n\t\t\t\t//Initialize a new board with the current state (slice() is used to create a new array and not modify the original)\r\n\t\t\t\tlet child = new Board(board.state.slice());\r\n\t\t\t\t//Create a child node by inserting the minimizing symbol o into the current emoty cell\r\n\t\t\t\tchild.insert('o', avail2[loopvar2]);\t\t\t\t\r\n\r\n\t\t\t\t//Recursively calling getBestMove this time with the new board and maximizing turn and incrementing the depth\r\n\t\t\t\tlet node_value = this.getBestMove(child, alpha, beta, true, callback, depth + 1);\r\n\t\t\t\t//Updating best value\r\n\t\t\t\tbest = Math.min(best, node_value);\r\n\t\t\t\tbeta = Math.min(best, beta);\r\n\t\t\t\tif(beta <= alpha) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\t\t\t\t\r\n\r\n\t\t\t\t//If it's the main function call, not a recursive one, map each heuristic value with it's moves indicies\r\n\t\t\t\tif(depth == 0) {\r\n\t\t\t\t\t//Comma seperated indicies if multiple moves have the same heuristic value\r\n\t\t\t\t\tvar moves = this.nodes_map.has(node_value) ? this.nodes_map.get(node_value) + ',' + avail2[loopvar2] : avail2[loopvar2];\r\n\t\t\t\t\tthis.nodes_map.set(node_value, moves);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\t//If it's the main call, return the index of the best move or a random index if multiple indicies have the same value\r\n\t\t\tif(depth == 0) {\r\n\t\t\t\tif(typeof this.nodes_map.get(best) == 'string') {\r\n\t\t\t\t\tvar arr = this.nodes_map.get(best).split(',');\r\n\t\t\t\t\tvar rand = Math.floor(Math.random() * arr.length);\r\n\t\t\t\t\tvar ret = arr[rand];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tret = this.nodes_map.get(best);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcallback(ret);\r\n\t\t\t\treturn ret;\r\n\t\t\t}\r\n\t\t\t//If not main call (recursive) return the heuristic value for next calculation\r\n\t\t\treturn best;\r\n\t\t}\r\n\r\n\t}\r\n}\r\n\r\nexport default Player;\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Player.js","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/style.scss\n// module id = 2\n// module chunks = 0","import Board from './classes/Board';\r\nimport Player from './classes/Player';\r\nimport './style.scss';\r\n\r\n//Helpers (from http://jaketrent.com/post/addremove-classes-raw-javascript/)\r\nfunction hasClass(el, className) {\r\n  if (el.classList)\r\n    return el.classList.contains(className);\r\n  else\r\n    return !!el.className.match(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'));\r\n}\r\nfunction addClass(el, className) {\r\n  if (el.classList)\r\n    el.classList.add(className);\r\n  else if (!hasClass(el, className)) el.className += \" \" + className;\r\n}\r\nfunction removeClass(el, className) {\r\n  if (el.classList)\r\n    el.classList.remove(className);\r\n  else if (hasClass(el, className)) {\r\n    var reg = new RegExp('(\\\\s|^)' + className + '(\\\\s|$)');\r\n    el.className=el.className.replace(reg, ' ');\r\n  }\r\n}\r\n\r\n/*\r\nHelper function that takes the object returned from isTerminal() and adds a\r\nclass to the board that will handle drawing the winning line's animation\r\n*/\r\nfunction drawWinningLine({ direction, row }) {\r\n\tlet board = document.getElementById(\"board\");\r\n\tboard.className = `${direction}${row}`;\r\n\tsetTimeout(() => { board.className += ' full'; }, 50);\r\n}\r\n\r\n\r\n//Starts a new game with a certain depth and a starting_player of 1 if human is going to start, single player \r\nfunction newGame(depth = -1, starting_player = 1, game_type = 1) {\r\n\t//Instantiating a new player and an empty board\r\n\tlet p = new Player(parseInt(depth));\r\n\tlet b = new Board(['','','','','','','','','']);\r\n\r\n\t//Clearing all #Board classes and populating cells HTML\r\n\tlet board = document.getElementById(\"board\");\r\n\tboard.className = '';\r\n\tboard.innerHTML = '<div class=\"cell-0\"></div><div class=\"cell-1\"></div><div class=\"cell-2\"></div><div class=\"cell-3\"></div><div class=\"cell-4\"></div><div class=\"cell-5\"></div><div class=\"cell-6\"></div><div class=\"cell-7\"></div><div class=\"cell-8\"></div>';\r\n\r\n\t//Clearing all celebrations classes\r\n\tremoveClass(document.getElementById(\"charachters\"), 'celebrate_human'); //add celebrate human 1 and 2\r\n\tremoveClass(document.getElementById(\"charachters\"), 'celebrate_robot');\r\n\r\n\t//Storing HTML cells in an array\r\n\tlet html_cells = [...board.children];\r\n\r\n\t//for single player\r\n\tif(game_type) {\r\n\t\t//Initializing some variables for internal use\r\n\t\tlet starting = parseInt(starting_player),\r\n\t\t\tmaximizing = starting,\r\n\t\t\tplayer_turn = starting;\r\n\r\n\t\t//If computer is going to start, choose center\r\n\t\tif(!starting) {\r\n\t\t\t//let center_and_corners = [0,2,4,6,8];\r\n\t\t\t//let first_choice = center_and_corners[Math.floor(Math.random()*center_and_corners.length)];\r\n\t\t\tlet symbol = !maximizing ? 'x' : 'o';\r\n\t\t\tb.insert(symbol, 4);\r\n\t\t\taddClass(html_cells[4], symbol);\r\n\t\t\tplayer_turn = 1; //Switch turns\r\n\t\t}\r\n\r\n\t\t//Adding Click event listener for each cell\r\n  \t\tb.state.forEach((cell, index) => {\r\n  \t\t\thtml_cells[index].addEventListener('click', () => {\r\n  \t\t\t\t//If cell is already occupied or the board is in a terminal state or it's not humans turn, return false\r\n  \t\t\t\tif(hasClass(html_cells[index], 'x') || hasClass(html_cells[index], 'o') || b.isTerminal() || !player_turn) return false;\r\n\r\n  \t\t\t\tlet symbol = maximizing ? 'x' : 'o'; //Maximizing player is always 'x'\r\n\r\n  \t\t\t\t//Update the Board class instance as well as the Board UI\r\n  \t\t\t\tb.insert(symbol, index);\r\n  \t\t\t\taddClass(html_cells[index], symbol);\r\n\r\n  \t\t\t\t//If it's a terminal move and it's not a draw, then human won\r\n  \t\t\t\tif(b.isTerminal()) {\r\n  \t\t\t\t\tlet { winner } = b.isTerminal();\r\n\t\t\t\t\tif(winner !== 'draw') addClass(document.getElementById(\"charachters\"), 'celebrate_human');\r\n  \t\t\t\t\tdrawWinningLine(b.isTerminal());\r\n  \t\t\t\t}\r\n  \t\t\t\tplayer_turn = 0; //Switch turns\r\n\r\n  \t\t\t\t//Get computer's best move and update the UI\r\n  \t\t\t\tp.getBestMove(b, -100, 100, !maximizing, best => {\r\n  \t\t\t\t\tlet symbol = !maximizing ? 'x' : 'o';\r\n  \t\t\t\t\tb.insert(symbol, best);\r\n  \t\t\t\t\taddClass(html_cells[best], symbol);\r\n  \t\t\t\t\tif(b.isTerminal()) {\r\n\t  \t\t\t\t\tlet { winner } = b.isTerminal();\r\n\t\t\t\t\t\tif(winner !== 'draw') addClass(document.getElementById(\"charachters\"), 'celebrate_robot');\r\n\t  \t\t\t\t\tdrawWinningLine(b.isTerminal());\r\n\t  \t\t\t\t}\r\n  \t\t\t\t\tplayer_turn = 1; //Switch turns\r\n  \t\t\t\t});\r\n  \t\t\t}, false);\r\n  \t\t\tif(cell) addClass(html_cells[index], cell);\r\n  \t\t});\r\n  \t}\r\n  \t//for multiplayer\r\n  \telse if(!game_type) {\r\n\r\n  \t\t//make other buttons unclickable if multiplayer is chosen !?\r\n  \t\t//Initializing some variables for internal use\r\n\t\tlet currentPlayer = \"x\"; //stores player turns\r\n\r\n\t\t//Adding Click event listener for each cell\r\n\t\tb.state.forEach((cell, index) => {\r\n  \t\t\thtml_cells[index].addEventListener('click', () => {\r\n  \t\t\t\t//If cell is already occupied or the board is in a terminal state, return false\r\n  \t\t\t\tif(hasClass(html_cells[index], 'x') || hasClass(html_cells[index], 'o') || b.isTerminal()) return false;\r\n\r\n  \t\t\t\tlet symbol = currentPlayer; \r\n\r\n  \t\t\t\t//Update the Board class instance as well as the Board UI\r\n  \t\t\t\tb.insert(symbol, index);\r\n  \t\t\t\taddClass(html_cells[index], symbol);\r\n\r\n  \t\t\t\t//change player turns\r\n            \tcurrentPlayer = currentPlayer == \"x\" ? \"o\" : \"x\";\r\n\r\n            \t//changes player's turn label text on bottom of the game \r\n            \tdocument.getElementById(\r\n              \t\t\"player\"\r\n            \t).innerHTML = currentPlayer.toUpperCase();\r\n\r\n  \t\t\t\t//If it's a terminal move and it's not a draw, then X won\r\n  \t\t\t\tif(b.isTerminal()) {\r\n  \t\t\t\t\tlet { winner } = b.isTerminal();\r\n\t\t\t\t\tif(winner !== 'draw') addClass(document.getElementById(\"charachters\"), 'celebrate_human');\r\n  \t\t\t\t\tdrawWinningLine(b.isTerminal());\r\n  \t\t\t\t}\r\n  \t\t\t\t\r\n\r\n  \t\t\t}, false);\r\n  \t\t\tif(cell) addClass(html_cells[index], cell);\r\n  \t\t});\r\n  \t}\r\n\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", event => {\r\n\r\n\t//Start a new game when page loads with default values\r\n\t\r\n\tlet depth = -1;\r\n\tlet starting_player = 1; //human\r\n\tlet game_type = 1; //singlePlayer\r\n\tnewGame(depth, starting_player, game_type); //gametype argument\r\n\r\n\t//event listener for game type\r\n\tdocument.getElementById(\"game_type\").addEventListener(\"click\", (event) => {\r\n\t\tif(event.target.tagName !== \"LI\" || hasClass(event.target, 'active')) return\r\n\t\tlet game_type_choices = [...document.getElementById(\"game_type\").children[0].children];\r\n\t\tgame_type_choices.forEach((choice) => {\r\n\t\t\tremoveClass(choice, 'active');\r\n\t\t});\r\n\t\taddClass(event.target, 'active');\r\n\t\tgame_type = event.target.dataset.value;\r\n\t}, false);\r\n\r\n\t//Events handlers for depth, starting player options\r\n\tdocument.getElementById(\"depth\").addEventListener(\"click\", (event) => {\r\n\t\tif(event.target.tagName !== \"LI\" || hasClass(event.target, 'active')) return\r\n\t\tlet depth_choices = [...document.getElementById(\"depth\").children[0].children];\r\n\t\tdepth_choices.forEach((choice) => {\r\n\t\t\tremoveClass(choice, 'active');\r\n\t\t});\r\n\t\taddClass(event.target, 'active');\r\n\t\tdepth = event.target.dataset.value; \r\n\t}, false);\r\n\r\n\tdocument.getElementById(\"starting_player\").addEventListener(\"click\", (event) => {\r\n\t\tif(event.target.tagName !== \"LI\" || hasClass(event.target, 'active')) return\r\n\t\tlet starting_player_choices = [...document.getElementById(\"starting_player\").children[0].children];\r\n\t\tstarting_player_choices.forEach((choice) => {\r\n\t\t\tremoveClass(choice, 'active');\r\n\t\t});\r\n\t\taddClass(event.target, 'active');\r\n\t\tstarting_player = event.target.dataset.value;\r\n\t}, false);\r\n\r\n\tdocument.getElementById(\"newgame\").addEventListener('click', () => {\r\n\t\tnewGame(depth, starting_player, game_type);\r\n\t});\r\n\r\n});\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}